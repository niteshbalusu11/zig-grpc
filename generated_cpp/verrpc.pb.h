// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: verrpc.proto
// Protobuf C++ Version: 5.28.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_verrpc_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_verrpc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_verrpc_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_verrpc_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_verrpc_2eproto;
namespace verrpc {
class Version;
struct VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
class VersionRequest;
struct VersionRequestDefaultTypeInternal;
extern VersionRequestDefaultTypeInternal _VersionRequest_default_instance_;
}  // namespace verrpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace verrpc {

// ===================================================================


// -------------------------------------------------------------------

class VersionRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:verrpc.VersionRequest) */ {
 public:
  inline VersionRequest() : VersionRequest(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VersionRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline VersionRequest(const VersionRequest& from) : VersionRequest(nullptr, from) {}
  inline VersionRequest(VersionRequest&& from) noexcept
      : VersionRequest(nullptr, std::move(from)) {}
  inline VersionRequest& operator=(const VersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionRequest& operator=(VersionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersionRequest* internal_default_instance() {
    return reinterpret_cast<const VersionRequest*>(
        &_VersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(VersionRequest& a, VersionRequest& b) { a.Swap(&b); }
  inline void Swap(VersionRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VersionRequest* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<VersionRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const VersionRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const VersionRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "verrpc.VersionRequest"; }

 protected:
  explicit VersionRequest(::google::protobuf::Arena* arena);
  VersionRequest(::google::protobuf::Arena* arena, const VersionRequest& from);
  VersionRequest(::google::protobuf::Arena* arena, VersionRequest&& from) noexcept
      : VersionRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::internal::ZeroFieldsBase::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:verrpc.VersionRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_VersionRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VersionRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_verrpc_2eproto;
};
// -------------------------------------------------------------------

class Version final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:verrpc.Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  ~Version() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Version(
      ::google::protobuf::internal::ConstantInitialized);

  inline Version(const Version& from) : Version(nullptr, from) {}
  inline Version(Version&& from) noexcept
      : Version(nullptr, std::move(from)) {}
  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Version& default_instance() {
    return *internal_default_instance();
  }
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
        &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Version& a, Version& b) { a.Swap(&b); }
  inline void Swap(Version* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Version* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Version>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Version& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Version& from) { Version::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Version* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "verrpc.Version"; }

 protected:
  explicit Version(::google::protobuf::Arena* arena);
  Version(::google::protobuf::Arena* arena, const Version& from);
  Version(::google::protobuf::Arena* arena, Version&& from) noexcept
      : Version(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBuildTagsFieldNumber = 8,
    kCommitFieldNumber = 1,
    kCommitHashFieldNumber = 2,
    kVersionFieldNumber = 3,
    kAppPreReleaseFieldNumber = 7,
    kGoVersionFieldNumber = 9,
    kAppMajorFieldNumber = 4,
    kAppMinorFieldNumber = 5,
    kAppPatchFieldNumber = 6,
  };
  // repeated string build_tags = 8;
  int build_tags_size() const;
  private:
  int _internal_build_tags_size() const;

  public:
  void clear_build_tags() ;
  const std::string& build_tags(int index) const;
  std::string* mutable_build_tags(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_build_tags(int index, Arg_&& value, Args_... args);
  std::string* add_build_tags();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_build_tags(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& build_tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_build_tags();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_build_tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_build_tags();

  public:
  // string commit = 1;
  void clear_commit() ;
  const std::string& commit() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_commit(Arg_&& arg, Args_... args);
  std::string* mutable_commit();
  PROTOBUF_NODISCARD std::string* release_commit();
  void set_allocated_commit(std::string* value);

  private:
  const std::string& _internal_commit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commit(
      const std::string& value);
  std::string* _internal_mutable_commit();

  public:
  // string commit_hash = 2;
  void clear_commit_hash() ;
  const std::string& commit_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_commit_hash(Arg_&& arg, Args_... args);
  std::string* mutable_commit_hash();
  PROTOBUF_NODISCARD std::string* release_commit_hash();
  void set_allocated_commit_hash(std::string* value);

  private:
  const std::string& _internal_commit_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commit_hash(
      const std::string& value);
  std::string* _internal_mutable_commit_hash();

  public:
  // string version = 3;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string app_pre_release = 7;
  void clear_app_pre_release() ;
  const std::string& app_pre_release() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_pre_release(Arg_&& arg, Args_... args);
  std::string* mutable_app_pre_release();
  PROTOBUF_NODISCARD std::string* release_app_pre_release();
  void set_allocated_app_pre_release(std::string* value);

  private:
  const std::string& _internal_app_pre_release() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_pre_release(
      const std::string& value);
  std::string* _internal_mutable_app_pre_release();

  public:
  // string go_version = 9;
  void clear_go_version() ;
  const std::string& go_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_go_version(Arg_&& arg, Args_... args);
  std::string* mutable_go_version();
  PROTOBUF_NODISCARD std::string* release_go_version();
  void set_allocated_go_version(std::string* value);

  private:
  const std::string& _internal_go_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_go_version(
      const std::string& value);
  std::string* _internal_mutable_go_version();

  public:
  // uint32 app_major = 4;
  void clear_app_major() ;
  ::uint32_t app_major() const;
  void set_app_major(::uint32_t value);

  private:
  ::uint32_t _internal_app_major() const;
  void _internal_set_app_major(::uint32_t value);

  public:
  // uint32 app_minor = 5;
  void clear_app_minor() ;
  ::uint32_t app_minor() const;
  void set_app_minor(::uint32_t value);

  private:
  ::uint32_t _internal_app_minor() const;
  void _internal_set_app_minor(::uint32_t value);

  public:
  // uint32 app_patch = 6;
  void clear_app_patch() ;
  ::uint32_t app_patch() const;
  void set_app_patch(::uint32_t value);

  private:
  ::uint32_t _internal_app_patch() const;
  void _internal_set_app_patch(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:verrpc.Version)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      90, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Version_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Version& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> build_tags_;
    ::google::protobuf::internal::ArenaStringPtr commit_;
    ::google::protobuf::internal::ArenaStringPtr commit_hash_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr app_pre_release_;
    ::google::protobuf::internal::ArenaStringPtr go_version_;
    ::uint32_t app_major_;
    ::uint32_t app_minor_;
    ::uint32_t app_patch_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_verrpc_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// VersionRequest

// -------------------------------------------------------------------

// Version

// string commit = 1;
inline void Version::clear_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.commit_.ClearToEmpty();
}
inline const std::string& Version::commit() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:verrpc.Version.commit)
  return _internal_commit();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Version::set_commit(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.commit_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:verrpc.Version.commit)
}
inline std::string* Version::mutable_commit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_commit();
  // @@protoc_insertion_point(field_mutable:verrpc.Version.commit)
  return _s;
}
inline const std::string& Version::_internal_commit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.commit_.Get();
}
inline void Version::_internal_set_commit(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.commit_.Set(value, GetArena());
}
inline std::string* Version::_internal_mutable_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.commit_.Mutable( GetArena());
}
inline std::string* Version::release_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:verrpc.Version.commit)
  return _impl_.commit_.Release();
}
inline void Version::set_allocated_commit(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.commit_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.commit_.IsDefault()) {
          _impl_.commit_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:verrpc.Version.commit)
}

// string commit_hash = 2;
inline void Version::clear_commit_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.commit_hash_.ClearToEmpty();
}
inline const std::string& Version::commit_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:verrpc.Version.commit_hash)
  return _internal_commit_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Version::set_commit_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.commit_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:verrpc.Version.commit_hash)
}
inline std::string* Version::mutable_commit_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_commit_hash();
  // @@protoc_insertion_point(field_mutable:verrpc.Version.commit_hash)
  return _s;
}
inline const std::string& Version::_internal_commit_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.commit_hash_.Get();
}
inline void Version::_internal_set_commit_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.commit_hash_.Set(value, GetArena());
}
inline std::string* Version::_internal_mutable_commit_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.commit_hash_.Mutable( GetArena());
}
inline std::string* Version::release_commit_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:verrpc.Version.commit_hash)
  return _impl_.commit_hash_.Release();
}
inline void Version::set_allocated_commit_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.commit_hash_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.commit_hash_.IsDefault()) {
          _impl_.commit_hash_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:verrpc.Version.commit_hash)
}

// string version = 3;
inline void Version::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& Version::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:verrpc.Version.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Version::set_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:verrpc.Version.version)
}
inline std::string* Version::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:verrpc.Version.version)
  return _s;
}
inline const std::string& Version::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void Version::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(value, GetArena());
}
inline std::string* Version::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* Version::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:verrpc.Version.version)
  return _impl_.version_.Release();
}
inline void Version::set_allocated_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:verrpc.Version.version)
}

// uint32 app_major = 4;
inline void Version::clear_app_major() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_major_ = 0u;
}
inline ::uint32_t Version::app_major() const {
  // @@protoc_insertion_point(field_get:verrpc.Version.app_major)
  return _internal_app_major();
}
inline void Version::set_app_major(::uint32_t value) {
  _internal_set_app_major(value);
  // @@protoc_insertion_point(field_set:verrpc.Version.app_major)
}
inline ::uint32_t Version::_internal_app_major() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.app_major_;
}
inline void Version::_internal_set_app_major(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_major_ = value;
}

// uint32 app_minor = 5;
inline void Version::clear_app_minor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_minor_ = 0u;
}
inline ::uint32_t Version::app_minor() const {
  // @@protoc_insertion_point(field_get:verrpc.Version.app_minor)
  return _internal_app_minor();
}
inline void Version::set_app_minor(::uint32_t value) {
  _internal_set_app_minor(value);
  // @@protoc_insertion_point(field_set:verrpc.Version.app_minor)
}
inline ::uint32_t Version::_internal_app_minor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.app_minor_;
}
inline void Version::_internal_set_app_minor(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_minor_ = value;
}

// uint32 app_patch = 6;
inline void Version::clear_app_patch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_patch_ = 0u;
}
inline ::uint32_t Version::app_patch() const {
  // @@protoc_insertion_point(field_get:verrpc.Version.app_patch)
  return _internal_app_patch();
}
inline void Version::set_app_patch(::uint32_t value) {
  _internal_set_app_patch(value);
  // @@protoc_insertion_point(field_set:verrpc.Version.app_patch)
}
inline ::uint32_t Version::_internal_app_patch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.app_patch_;
}
inline void Version::_internal_set_app_patch(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_patch_ = value;
}

// string app_pre_release = 7;
inline void Version::clear_app_pre_release() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_pre_release_.ClearToEmpty();
}
inline const std::string& Version::app_pre_release() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:verrpc.Version.app_pre_release)
  return _internal_app_pre_release();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Version::set_app_pre_release(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_pre_release_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:verrpc.Version.app_pre_release)
}
inline std::string* Version::mutable_app_pre_release() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_app_pre_release();
  // @@protoc_insertion_point(field_mutable:verrpc.Version.app_pre_release)
  return _s;
}
inline const std::string& Version::_internal_app_pre_release() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.app_pre_release_.Get();
}
inline void Version::_internal_set_app_pre_release(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_pre_release_.Set(value, GetArena());
}
inline std::string* Version::_internal_mutable_app_pre_release() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.app_pre_release_.Mutable( GetArena());
}
inline std::string* Version::release_app_pre_release() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:verrpc.Version.app_pre_release)
  return _impl_.app_pre_release_.Release();
}
inline void Version::set_allocated_app_pre_release(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_pre_release_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_pre_release_.IsDefault()) {
          _impl_.app_pre_release_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:verrpc.Version.app_pre_release)
}

// repeated string build_tags = 8;
inline int Version::_internal_build_tags_size() const {
  return _internal_build_tags().size();
}
inline int Version::build_tags_size() const {
  return _internal_build_tags_size();
}
inline void Version::clear_build_tags() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.build_tags_.Clear();
}
inline std::string* Version::add_build_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_build_tags()->Add();
  // @@protoc_insertion_point(field_add_mutable:verrpc.Version.build_tags)
  return _s;
}
inline const std::string& Version::build_tags(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:verrpc.Version.build_tags)
  return _internal_build_tags().Get(index);
}
inline std::string* Version::mutable_build_tags(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:verrpc.Version.build_tags)
  return _internal_mutable_build_tags()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Version::set_build_tags(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_build_tags()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:verrpc.Version.build_tags)
}
template <typename Arg_, typename... Args_>
inline void Version::add_build_tags(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_build_tags(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:verrpc.Version.build_tags)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Version::build_tags() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:verrpc.Version.build_tags)
  return _internal_build_tags();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Version::mutable_build_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:verrpc.Version.build_tags)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_build_tags();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Version::_internal_build_tags() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.build_tags_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Version::_internal_mutable_build_tags() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.build_tags_;
}

// string go_version = 9;
inline void Version::clear_go_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.go_version_.ClearToEmpty();
}
inline const std::string& Version::go_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:verrpc.Version.go_version)
  return _internal_go_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Version::set_go_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.go_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:verrpc.Version.go_version)
}
inline std::string* Version::mutable_go_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_go_version();
  // @@protoc_insertion_point(field_mutable:verrpc.Version.go_version)
  return _s;
}
inline const std::string& Version::_internal_go_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.go_version_.Get();
}
inline void Version::_internal_set_go_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.go_version_.Set(value, GetArena());
}
inline std::string* Version::_internal_mutable_go_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.go_version_.Mutable( GetArena());
}
inline std::string* Version::release_go_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:verrpc.Version.go_version)
  return _impl_.go_version_.Release();
}
inline void Version::set_allocated_go_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.go_version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.go_version_.IsDefault()) {
          _impl_.go_version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:verrpc.Version.go_version)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace verrpc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_verrpc_2eproto_2epb_2eh
